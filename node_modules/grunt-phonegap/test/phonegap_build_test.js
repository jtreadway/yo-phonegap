(function() {
  var grunt, path, xmlParser;

  grunt = require('grunt');

  xmlParser = require('xml2json');

  path = require('path');

  exports.phonegap = {
    'tree should be created': function(test) {
      test.expect(6);
      test.ok(grunt.file.isDir('test/phonegap'), 'should create the output directory');
      test.ok(grunt.file.isDir('test/phonegap/merges'), 'should create the merges directory');
      test.ok(grunt.file.isDir('test/phonegap/platforms'), 'should create the platforms directory');
      test.ok(grunt.file.isDir('test/phonegap/plugins'), 'should create the plugins directory');
      test.ok(grunt.file.isDir('test/phonegap/www'), 'should create the www directory');
      test.ok(grunt.file.isDir('test/phonegap/.cordova'), 'should create the .cordova directory');
      return test.done();
    },
    'files should be copied': function(test) {
      test.expect(2);
      test.ok(grunt.file.isFile('test/phonegap/www/config.xml'), 'should copy files from root');
      test.ok(grunt.file.isFile('test/phonegap/.cordova/config.json'), 'should copy files from cordova');
      return test.done();
    },
    'plugins should be installed': function(test) {
      test.expect(1);
      test.ok(grunt.file.isDir('test/phonegap/plugins/org.apache.cordova.core.device'), 'should add a local plugin');
      return test.done();
    },
    'android platform should be built': function(test) {
      var name;
      test.expect(1);
      name = grunt.config.get('phonegap.config.config.data.name');
      test.ok(grunt.file.isFile("test/phonegap/platforms/android/bin/" + name + "-debug.apk"), 'debug apk should be created');
      return test.done();
    },
    'the specified config.xml template should be compiled': function(test) {
      test.expect(1);
      test.ok(grunt.file.isFile('test/phonegap/www/config.xml'), 'a file should be written to config.xml');
      return test.done();
    },
    'configData should be interpolated in config.xml': function(test) {
      var config, data, xml;
      test.expect(2);
      data = grunt.config.get('phonegap.config.config.data');
      xml = grunt.file.read('test/phonegap/www/config.xml');
      config = xmlParser.toJson(xml, {
        object: true
      });
      test.equal(config.widget.id, data.id, 'id should match config.id');
      test.equal(config.widget.version, data.version, 'version should match config.version');
      return test.done();
    },
    'versionCode in AndroidManifest.xml should match config.versionCode': function(test) {
      var data, manifest, versionCode, xml;
      test.expect(1);
      data = grunt.config.get('phonegap.config.versionCode');
      if (grunt.util.kindOf(data) === 'function') {
        versionCode = data();
      }
      xml = grunt.file.read('test/phonegap/platforms/android/AndroidManifest.xml');
      manifest = xmlParser.toJson(xml, {
        object: true
      });
      test.equal(versionCode, manifest['manifest']['android:versionCode'], 'versionCode value should match');
      return test.done();
    }
  };

}).call(this);
